/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dominodatalab.distributedcomputeoperator.spark.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * V1alpha1SparkClusterSpecDriver
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-04T16:38:59.380Z[Etc/UTC]")
public class V1alpha1SparkClusterSpecDriver {
  public static final String SERIALIZED_NAME_BLOCK_MANAGER_PORT = "blockManagerPort";
  @SerializedName(SERIALIZED_NAME_BLOCK_MANAGER_PORT)
  private Integer blockManagerPort;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private Map<String, String> selector = null;

  public static final String SERIALIZED_NAME_UI_PORT = "uiPort";
  @SerializedName(SERIALIZED_NAME_UI_PORT)
  private Integer uiPort;


  public V1alpha1SparkClusterSpecDriver blockManagerPort(Integer blockManagerPort) {
    
    this.blockManagerPort = blockManagerPort;
    return this;
  }

   /**
   * Get blockManagerPort
   * @return blockManagerPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBlockManagerPort() {
    return blockManagerPort;
  }


  public void setBlockManagerPort(Integer blockManagerPort) {
    this.blockManagerPort = blockManagerPort;
  }


  public V1alpha1SparkClusterSpecDriver port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public V1alpha1SparkClusterSpecDriver selector(Map<String, String> selector) {
    
    this.selector = selector;
    return this;
  }

  public V1alpha1SparkClusterSpecDriver putSelectorItem(String key, String selectorItem) {
    if (this.selector == null) {
      this.selector = new HashMap<>();
    }
    this.selector.put(key, selectorItem);
    return this;
  }

   /**
   * Get selector
   * @return selector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getSelector() {
    return selector;
  }


  public void setSelector(Map<String, String> selector) {
    this.selector = selector;
  }


  public V1alpha1SparkClusterSpecDriver uiPort(Integer uiPort) {
    
    this.uiPort = uiPort;
    return this;
  }

   /**
   * Get uiPort
   * @return uiPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUiPort() {
    return uiPort;
  }


  public void setUiPort(Integer uiPort) {
    this.uiPort = uiPort;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1SparkClusterSpecDriver v1alpha1SparkClusterSpecDriver = (V1alpha1SparkClusterSpecDriver) o;
    return Objects.equals(this.blockManagerPort, v1alpha1SparkClusterSpecDriver.blockManagerPort) &&
        Objects.equals(this.port, v1alpha1SparkClusterSpecDriver.port) &&
        Objects.equals(this.selector, v1alpha1SparkClusterSpecDriver.selector) &&
        Objects.equals(this.uiPort, v1alpha1SparkClusterSpecDriver.uiPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockManagerPort, port, selector, uiPort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1SparkClusterSpecDriver {\n");
    sb.append("    blockManagerPort: ").append(toIndentedString(blockManagerPort)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    uiPort: ").append(toIndentedString(uiPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

